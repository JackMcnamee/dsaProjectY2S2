package ie.gmit.sw;

import java.io.*;
import java.util.*;

public class Parser {
	
	private static final String ignoreWordsFile = "ignorewords.txt";
	
	private static Scanner console = new Scanner(System.in);
	
	private Set<String> ignoreWords = new HashSet<>();
	
	public Parser() {
		
	}
	
	public void parse(InputStream in) throws Exception 
	{
		BufferedReader userFile = new BufferedReader(new InputStreamReader(in));
		String next = null;
		
		while((next = userFile.readLine())!=null) {
			String[] words = next.split(" ");
			for(String word:words) {
				if(!ignoreWords.contains(word)) {
					updateMap(word);
				}
			}
		} // while
		sortMap();
		in.close();
	} // parse
	
	public void parseIgnoreFile() throws IOException 
	{
		BufferedReader ignoreFile = new BufferedReader(new FileReader(ignoreWordsFile));
		String next = null;

		while ((next = ignoreFile.readLine()) != null) {

			if (next.isEmpty())
				continue;

			ignoreWords.add(next.toLowerCase());
		}// Adding to a HashSet is O(1)
	}
	
	private Map<String, Integer> wordMap = new HashMap<>();
	
	public void updateMap(String word) {
		
		int frequency;
		
		if(wordMap.containsKey(word)) {
			frequency = wordMap.get(word);
			wordMap.put(word, ++frequency);
		}
		else {
			wordMap.put(word,  1);
		}
			
	} 
	
	public int numUniqueWordsRead() {
		return wordMap.size();
	}
	
	private Queue<WordFrequency> q = new PriorityQueue<>();
	
	public void sortMap() {
		Set<String> keys = wordMap.keySet();
		
		for(String key : keys) {
			q.offer(new WordFrequency(key, wordMap.get(key)));
		}
			
	}
	
	public Queue<WordFrequency> getWordQueue() {
		return q;
	}

}
