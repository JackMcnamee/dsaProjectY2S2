package ie.gmit.sw;

import java.util.*;
import java.util.concurrent.ThreadLocalRandom;
import java.awt.*;
import java.awt.image.BufferedImage;

public class WordCloudImage 
{

	// instance variables
	private static final double maxFont = 50;
	private static final double minFont = 10;
	
	private BufferedImage image;
	
	public WordCloudImage() 
	{
		image = new BufferedImage(500, 400, BufferedImage.TYPE_4BYTE_ABGR);
	}

	public BufferedImage getImage() 
	{
		return image;
	}
	
	public void drawString(Queue<WordFrequency> q, int maxWords) 
	{
		int j, counter = 0, max = 0, min = 0, offset = 150;
		
		Graphics2D graphics = image.createGraphics(); 

		// Set the colour of the background
		graphics.setColor(Color.WHITE);
		graphics.fillRect(0, 0, 500, 400);
		
		Iterator<WordFrequency> i = q.iterator(); 
		
		WordFrequency wordFreq = new WordFrequency();
		
		while (i.hasNext() && counter < maxWords) 
		{ 
			j = i.next().getFrequency();
			if (j > max) max = j;
			if (j < min) min = j;
			
			while ((!q.isEmpty()) && counter < maxWords)
			{  
				wordFreq = q.poll();
				
				graphics.setFont(new Font(Font.SERIF, Font.BOLD, fontSize(wordFreq.getFrequency(), min, max)));
				graphics.setColor(Color.GRAY); 
				graphics.drawString(wordFreq.getWord(), generate(0, 500 - offset), generate(0, 400));
				counter++;
			}	
		}
		graphics.dispose();
	}
	
	// font size for word adjusted by frequency
	private int fontSize(double freq, double min, double max) 
	{
		return (int)Math.ceil((maxFont - minFont) * (freq - min) / (max - min) + minFont);
	}
	
	// Generate a random number between a given range
	public static int generate(int min, int max) 
	{
		return ThreadLocalRandom.current().nextInt(min, max + 1);
	}
}
